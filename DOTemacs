;;;from VQN 2009-04-13
;;;For *.Rnw files, hit "M-n s" when an R session is open, this will run Sweave('file') in R.  Then go to *.tex and latex the file 
;;;look in the ESS package lisp/ess-swv.el for more:
;;;;; M-n s to Sweave the file, then
;;;;; M-n l to run latex on the results of Sweave, then
;;;;; M-n p to make and display a postscript file , or
;;;;; M-n P to make and display a PDF version.
;;;


;; setting some default colors
(set-cursor-color "white")
(set-background-color "black")
(set-foreground-color "pink")

;;wing to turn on visble bell
(setq visible-bell t)



(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(inferior-R-args "--no-save ") ;; don't ask to save in R
 '(TeX-PDF-mode t) ;; this sets make pdf-tex-mode the default in AucTeX
 '(global-font-lock-mode t nil (font-lock))
 '(inhibit-startup-screen t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )


;; ===== Set the highlight current line minor mode ===== 

;; In every buffer, the line which contains the cursor will be fully
;; highlighted


(global-hl-line-mode 1)

;; ========== Support Wheel Mouse Scrolling ========== 

(mouse-wheel-mode t) 

;; ========== Enable Line and Column Numbering ==========

;; Show line-number in the mode line
(line-number-mode 1)


;; Show column-number in the mode line
(column-number-mode 1)

;; ===== Function to delete a line =====
 
 ;; First define a variable which will store the previous column position
 
 (defvar previous-column nil "Save the column position")
 
 
 ;; Define the nuke-line function. The line is killed, then the newline
 ;; character is deleted. The column which the cursor was positioned at is then
 ;; restored. Because the kill-line function is used, the contents deleted can
 ;; be later restored by usibackward-delete-char-untabifyng the yank commands.
 
 (defun nuke-line()
   "Kill an entire line, including the trailing newline character"
   (interactive)
 
 
   ;; Store the current column position, so it can later be restored for a more
   ;; natural feel to the deletion
   (setq previous-column (current-column))
 
 
   ;; Now move to the end of the current line
 
   (end-of-line)
 
 
   ;; Test the length of the line. If it is 0, there is no need for a
   ;; kill-line. All that happens in this case is that the new-line character
   ;; is deleted.
   (if (= (current-column) 0)
     (delete-char 1)
 
 
     ;; This is the 'else' clause. The current line being deleted is not zero
     ;; in length. First remove the line by moving to its start and then
     ;; killing, followed by deletion of the newline character, and then
     ;; finally restoration of the column position.
     (progn
       (beginning-of-line)
       (kill-line)
       (delete-char 1)
       (move-to-column previous-column))))
 
 
;; Now bind the delete line function to the F8 key
;; (global-set-key [f8] 'nuke-line)



;; Following for AucTeX
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)

;; the following is to interact RefTeX with AUCTeX, see ref card.
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
(setq reftex-plug-into-auctex t)

;; ESS
(require 'ess-site)
;; Use F5 to evaluate chunk in .Rnw file
(defun my-ess-hook ()
   "Add my keybindings to ESS mode."
   (local-set-key (kbd "<f5>") 'ess-eval-chunk))
 (add-hook 'ess-mode-hook 'my-ess-hook) 


;; following is for AucTex, adds Sweave commands to 'Command' menu
;; Linking ESS with AucTex
(add-hook 'Rnw-mode-hook
	  (lambda ()
	    (add-to-list 'TeX-command-list
			 '("Sweave" "R CMD Sweave %s" 
			   TeX-run-command nil t :help "Run Sweave") t)
	    (add-to-list 'TeX-command-list
			 '("LatexSweave" "%l \"(%mode)\\input{%s}\"" 
			   TeX-run-TeX nil t :help "Run Latex after
Sweave") t)
	    (setq TeX-command-default "Sweave")))


;;following is AucTeX with Sweave -- works
;;http://andreas.kiermeier.googlepages.com/essmaterials
(setq TeX-file-extensions
      '("Snw" "Rnw" "nw" "tex" "sty" "cls" "ltx" "texi" "texinfo"))
(add-to-list 'auto-mode-alist '("\\.Rnw\\'" . Rnw-mode))
(add-to-list 'auto-mode-alist '("\\.Snw\\'" . Snw-mode))
(add-hook 'Rnw-mode-hook
(lambda ()
(add-to-list 'TeX-command-list
'("Sweave" "R CMD Sweave %s"
TeX-run-command nil (latex-mode) :help "Run Sweave") t)
(add-to-list 'TeX-command-list
'("LatexSweave" "%l %(mode) %s"
TeX-run-TeX nil (latex-mode) :help "Run Latex after Sweave") t)
;; following 3 lines for rubber, taken from same site as next paragraph, http://www.nabble.com/sweave-and-auctex-td23492805.html, xpdf to open
(add-to-list 'TeX-command-list
'("RubberSweave" "rubber -d %s && open '%s.pdf'" 
TeX-run-command nil t) t) 
(setq TeX-command-default "Sweave")))

;; AucTeX with rubber
;;http://www.nabble.com/sweave-and-auctex-td23492805.html
(eval-after-load "tex"
   '(add-to-list 'TeX-command-list
                ;;'("Rubber" "rubber -d %t && xpdf '%s.pdf'" TeX-run-command nil t) t)) ;; change by vinh
                '("Rubber" "rubber -d %t && open '%s.pdf'" TeX-run-command nil t) t)) 


;; python mode stuff
(setq auto-mode-alist
      (cons '("\\.py$" . python-mode) auto-mode-alist))
(setq interpreter-mode-alist
      (cons '("python" . python-mode)
            interpreter-mode-alist))
(autoload 'python-mode "python-mode" "Python editing mode." t)


;; following for mac laptop 2008-11-25
(mac-key-mode 1)
(require 'ess-site)
;; following sets option as meta key in carbon emacs
;; for GNU emacs in X, need to remap in .Xmodmap file
(setq mac-option-modifier 'meta)



;; following are taken so i know how to change these variables, i never use these!
;(setq tex-dvi-view-command "xdvi")
                ; define the command to view DVI-files

;(setq tex-dvi-print-command "dvips")
                ; define the command to print DVI-files

;(add-hook 'text-mode-hook 'turn-on-auto-fill)
                ; break lines at space when they are too long

;(transient-mark-mode 1)
                ; highlight the region whenever it is active

;(add-hook 'comint-output-filter-functions 'comint-watch-for-password-prompt)
                ; notice password prompts and turn off echoing for them

;(auto-compression-mode t)
                ; uncompress files before displaying them

;(global-font-lock-mode t)
                ; use colors to highlight commands, etc.




;; following for sage-mode in emacs
;; http://wiki.sagemath.org/sage-mode
;; download sage-mode first, then run
;; sage -f sage-mode-0.6.spkg

(add-to-list 'load-path (expand-file-name "/Applications/sage/data/emacs"))
(require 'sage "sage")
(setq sage-command "/Applications/sage/sage")

;; If you want sage-view to typeset all your output and have plot()
;; commands inline, uncomment the following line and configure sage-view:
;; (require 'sage-view "sage-view")
;; (add-hook 'sage-startup-hook 'sage-view)
;; You can use commands like
;; (add-hook 'sage-startup-hook 'sage-view
;; 'sage-view-disable-inline-output 'sage-view-disable-inline-plots)
;; to have some combination of features.  In future, the customize interface
;; will make this simpler... hint, hint!
